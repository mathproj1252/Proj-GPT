class ChatBot {
    constructor() {
        this.pipeline = null;
        this.isGenerating = false;
        this.isModelLoading = false;
        this.chatHistory = [];
        this.maxTokens = 50;
        
        this.initializeElements();
        this.setupEventListeners();
    }

    initializeElements() {
        this.chatMessages = document.getElementById('chat-messages');
        this.userInput = document.getElementById('user-input');
        this.sendBtn = document.getElementById('send-btn');
        this.loadModelBtn = document.getElementById('load-model-btn');
        this.status = document.getElementById('status');
        this.maxTokensSlider = document.getElementById('max-tokens');
        this.tokensValue = document.getElementById('tokens-value');
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.sendBtn.disabled = true;
        this.userInput.placeholder = "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å...";
    }

    setupEventListeners() {
        this.sendBtn.addEventListener('click', () => this.sendMessage());
        this.loadModelBtn.addEventListener('click', () => this.loadModel());
        this.userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !this.isGenerating && this.pipeline) {
                this.sendMessage();
            }
        });
        
        this.maxTokensSlider.addEventListener('input', (e) => {
            this.maxTokens = parseInt(e.target.value);
            this.tokensValue.textContent = this.maxTokens;
        });
    }

    async loadModel() {
        if (this.isModelLoading) return;
        
        this.isModelLoading = true;
        this.loadModelBtn.disabled = true;
        this.loadModelBtn.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...';
        this.updateStatus('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É GPT-2 Tiny...');

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            this.updateStatus('üì• –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å (~150MB)... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç');
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            this.pipeline = await transformers.pipeline(
                'text-generation',
                'Xenova/distilgpt2', // –ë–æ–ª–µ–µ –ª–µ–≥–∫–∞—è –≤–µ—Ä—Å–∏—è GPT-2
                {
                    device: 'cpu',
                    quantized: true,
                    progress_callback: (data) => {
                        if (data.status === 'downloading') {
                            const percent = data.progress * 100;
                            this.updateStatus(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: ${percent.toFixed(1)}%`);
                        }
                    }
                }
            );

            this.updateStatus('‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ú–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è!');
            this.addBotMessage('–û—Ç–ª–∏—á–Ω–æ! –ú–æ–¥–µ–ª—å GPT-2 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –≤–∞—à –±—Ä–∞—É–∑–µ—Ä! üéâ –¢–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å!');
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.sendBtn.disabled = false;
            this.userInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...';
            this.userInput.focus();
            this.loadModelBtn.style.display = 'none';

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', error);
            this.updateStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            this.addBotMessage('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            
            this.loadModelBtn.disabled = false;
            this.loadModelBtn.textContent = 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞';
            this.isModelLoading = false;
        }
    }

    async sendMessage() {
        const message = this.userInput.value.trim();
        if (!message || this.isGenerating || !this.pipeline) return;

        // –û—á–∏—â–∞–µ–º input –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userInput.value = '';
        this.addUserMessage(message);
        
        this.isGenerating = true;
        this.sendBtn.disabled = true;
        this.sendBtn.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...';

        try {
            const response = await this.generateResponse(message);
            this.addBotMessage(response);
            this.chatHistory.push({ role: 'user', content: message });
            this.chatHistory.push({ role: 'bot', content: response });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
            this.addBotMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } finally {
            this.isGenerating = false;
            this.sendBtn.disabled = false;
            this.sendBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
            this.userInput.focus();
        }
    }

    async generateResponse(message) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
        let prompt = this.chatHistory
            .slice(-4) // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
            .map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`)
            .join('\n');
        
        prompt += `\nUser: ${message}\nAssistant:`;
        
        try {
            const output = await this.pipeline(prompt, {
                max_new_tokens: this.maxTokens,
                temperature: 0.7,
                do_sample: true,
                repetition_penalty: 1.1,
                pad_token_id: 50256,
            });

            let response = output[0].generated_text;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            const assistantResponse = response.split('Assistant:').pop().trim();
            
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            return this.cleanResponse(assistantResponse);
            
        } catch (error) {
            throw new Error(`Generation failed: ${error.message}`);
        }
    }

    cleanResponse(text) {
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        return text
            .replace(/\n+/g, ' ')
            .replace(/\s+/g, ' ')
            .trim()
            .split('.')[0] + '.'; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    }

    addUserMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.className = 'message user-message';
        messageElement.innerHTML = `
            <div class="message-content">${this.escapeHtml(message)}</div>
        `;
        this.chatMessages.appendChild(messageElement);
        this.scrollToBottom();
    }

    addBotMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.className = 'message bot-message';
        messageElement.innerHTML = `
            <div class="message-content">${this.escapeHtml(message)}</div>
        `;
        this.chatMessages.appendChild(messageElement);
        this.scrollToBottom();
    }

    updateStatus(text) {
        this.status.textContent = text;
    }

    scrollToBottom() {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener('DOMContentLoaded', () => {
    new ChatBot();
});
